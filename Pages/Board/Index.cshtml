@page "{handler?}"
@inject Tools.IUserAttributes UserAttributes

@using KampongTalk.Models
@model KampongTalk.Pages.Board.IndexModel
@{
    ViewData["Title"] = "KampongBoard";
}

<link rel="stylesheet" href="~/css/board.css">

<div class="columns is-centered">
    <div class="column pt-5 pl-5">
        <h1 class="title has-text-centered">KampongBoard</h1>
        <aside class="menu">
            <ul class="menu-list">
                <li>
                    <a>Friends</a>
                </li>
                <li>
                    <a>Recommended For You</a>
                </li>
            </ul>
        </aside>
    </div>
    <div class="column is-three-fifths">
        <div class="hero is-fullheight-with-navbar has-background-white-ter" style="overflow-y: auto; height:80vh; padding-left: 1em; padding-right:  1rem">

            @{
                foreach (var post in Model.PostsToDisplay)
                {
                    <div class="card mt-4">
                        @{
                            if (post.InCommunity != null)
                            {
                                <div class="card-content card-meta">
                                    <p class="has-text-weight-medium"><i class="fas fa-arrow-right"></i>&ensp;Posted in <a href="/Community?c=@post.InCommunity" class="has-text-weight-bold has-text-black">@CommunityApi.GetCommunityById(post.InCommunity).Name</a></p>
                                </div>
                            }
                        }
                        <div class="card-content card-top">
                            <a href="/Profile?u=@UserApi.GetUserById(post.Author).Uid2">
                                <div class="level">
                                    <div class="level-left">
                                        <div class="level-item">
                                            <div class="pfp-post"></div>
                                        </div>
                                        <div class="level-item">
                                            <div>
                                                <p class="title is-5">
                                                    @UserApi.GetUserById(post.Author).Name
                                                    <span class="is-size-6 has-text-grey" style="margin-top: -1.5rem">&#64;@UserApi.GetUserById(post.Author).Uid2</span>
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </a>
                        </div>
                        <div class="card-content">
                            <p class="is-size-5">@post.Content</p>
                        </div>
                        <div class="card-content has-background-light">
                            <div class="level is-mobile">
                                <div class="level-left">
                                    <a class="level-item">
                                        <div class="tags has-addons">
                                            <span class="tag is-primary"><i class="fas fa-thumbs-up"></i>&ensp; Like</span>
                                            <span class="tag is-dark">@LikesApi.GetLikesByPid(post.Pid)</span>
                                        </div>
                                    </a>
                                    <a class="level-item">
                                        <div class="tags has-addons">
                                            <span class="tag is-info"><i class="fas fa-comments"></i>&ensp; Reply</span>
                                            <span class="tag is-dark">@PostApi.GetCommentCountByPid(post.Pid)</span>
                                        </div>
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
    <div class="column">
        <div class="container m-5">
    @*<div class="has-text-centered mt-6">
                <a href="/">
                    <button class="button is-info is-large">
                        <i class="fas fa-map-signs mr-2"></i>Map
                    </button>
                </a>
                <p>Explore the rest of KampongTalk</p>
            </div>
            <br />*@
            
            <p class="has-text-weight-bold mt-5 is-size-6">Popular Communities</p>
            <ul class="minorInfo">
                <li>
                    <a>Community 1 </a>
                </li>
                <li>
                    <a>Community 2 </a>
                </li>
                <li>
                    <a>Community 3 </a>
                </li>
                <li class="mt-3">
                    <a>View more Communities </a>
                </li>
            </ul>

            <p class="has-text-weight-bold mt-5 is-size-6">Popular Events</p>
            <ul class="minorInfo">
                <li>
                    <a>Event 1 </a>
                </li>
                <li>
                    <a>Event 2 </a>
                </li>
                <li>
                    <a>Event 3 </a>
                </li>
                <li class="mt-3">
                    <a>View more Events </a>
                </li>
            </ul>

            <div class="has-text-centered mt-6">
                <button class="button is-primary is-rounded is-large"
                        onclick="$('#CreatePostModal').fadeIn('fast');">
                    <i class="fas fa-pen mr-2"></i>Write Post
                </button>
            </div>
        </div>
    </div>
</div>

<partial name="_CreatePost" />

<script type="text/javascript">

    function likePost(Pid, likeBtn) {
        $.ajax({
            type: "POST",
            url: "/Board/like",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            data: JSON.stringify({
                EntityId: Pid,
                Uid: @Model.CurrentUser.Uid
            }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (likeResp) {
                var likeRespArr = likeResp.toString().split(",")
                if (likeRespArr[0] == '1') {
                    likeBtn.classList.remove('is-outlined')
                }
                else {
                    likeBtn.classList.add('is-outlined')
                }
                likeBtn.innerHTML = '<i class="far fa-thumbs-up mr-2"></i>' + likeRespArr[1] + " Likes"

            },
            error: function () {
                return "error";
            }

        })
    }

    function showComments(commentBtn) {
        const commentBtnPDiv = commentBtn.parentNode.parentNode
        const commentDiv = commentBtnPDiv.nextElementSibling
        if (commentDiv.classList.contains('is-hidden')) {
            commentBtn.classList.remove('is-outlined')
            commentDiv.classList.remove('is-hidden')
        } else {
            commentBtn.classList.add('is-outlined')
            commentDiv.classList.add('is-hidden')
        }
    }

</script>

<script>
    var translateText = (obj) => {
        var translateString = $(obj).prev().text()
        // Use the TranslateAPIController.cs, and run the Translate() function
        var url = '@Url.Action("Translate", "TranslateAPI")'
        console.log(translateString)

        @*// Pass in the parameters as {"text": blahblah, "language": blahblah}*@
        $.get(url, { text: translateString, language: "@UserAttributes.getTranslateLanguage()" })
            .done((data) => {
                $(obj).prev().text(data)
            })
    }

    // Keep a list of all the generated filenames, so we can delete them once the user does not need thems
    var filenames = []

    var deleteFile = (filename) => {
        // "Delete" refers to the function name, not the route name as specified in [Route] within your API controller
        var deleteUrl = '@Url.Action("Delete", "SpeechAPI")'
        console.log(deleteUrl)
        $.get(deleteUrl, { filename: filename })
        .done((data) => {
            console.log(data)
        })
    }

    var synthesizeSpeech = (obj) => {
        // Use the TranslateAPIController.cs, and run the Translate() function
        var url = '@Url.Action("AutoSynthesize", "SpeechAPI")'
        var ttsText = $(obj).prev().prev().text()

        // Pass in the parameters as {"text": blahblah, "language": blahblah}
        $.get(url, { text: ttsText, gender: "@UserAttributes.getSpeechGender()" })
            .done((data) => {
                var filename = `speech/${data}`
                filenames.push(filename)
                $(obj).next().attr("src", filename)
                $(obj).next()[0].play()
            })

        $(window).bind('beforeunload', () => {
            filenames.forEach((filename) => {
                deleteFile(filename)
            })
        })
    }

    // Delete all the synthesized files when the user navigates to another page
    console.log("This has ran")
    $(window).bind('beforeunload', () => {
        filenames.forEach((filename) => {
            deleteFile(filename)
        })
    })
</script>