@page "{handler?}"
@inject Tools.IUserAttributes UserAttributes

@using KampongTalk.Models
@model KampongTalk.Pages.Board.IndexModel
@{
    ViewData["Title"] = "KampongBoard";
    ViewData["currentUid"] = Model.CurrentUser.Uid;
}

<link rel="stylesheet" href="~/css/board.css">

<div class="columns is-centered">
    <div class="column pt-5 pl-5">
        <h1 class="title has-text-centered">KampongBoard</h1>
        <aside class="menu">
            <ul class="menu-list">
                @if (HttpContext.Request.Path == "/Board")
                {
                    <li><a href="/Board" class="is-active">Whole Kampong</a></li>
                }
                else
                {
                    <li><a href="/Board">Whole Kampong</a></li>
}

                @if (HttpContext.Request.Path == "/Board/Friends")
                {
                    <li><a href="/Board/Friends" class="is-active">Friends</a></li>
                }
                else
                {
                    <li><a href="/Board/Friends">Friends</a></li>
}

                @*@if (HttpContext.Request.Path == "/Board/Recommended")
                {
                    <li><a href="/Board/Recommended" class="is-active">Recommended For You</a></li>
                }
                else
                {
                    <li><a href="/Board/Recommended">Recommended For You</a></li>
                }*@

            </ul>
        </aside>

    </div>
    <div class="column is-three-fifths">
        <div id="mainBoard" class="hero is-fullheight-with-navbar has-background-white-ter" style="overflow-y: auto; height:80vh; padding-left: 1em; padding-right:  1rem; overflow-x:hidden;">

            @if (Model.PostsToDisplay.TotalPages > 0)
            {

                @foreach (var post in Model.PostsToDisplay.Items)
                {
                    <partial name="_Post" model="post" view-data="ViewData" />
                }


            }
            else
            {
                @if (HttpContext.Request.Path == "/Board/Friends")
                {
                    <section class="section has-text-centered">
                        <p class="is-size-4 mt-5 has-text-weight-bold">You have no friends :(</p>
                        <br />
                        <p>We suggest finding some friends at the Void Deck</p>
                        <br />
                        <a href="/DigitalVoidDeck/Lobby">
                            <span class="tag is-info is-large">Take me to the Void Deck</span>
                        </a>
                    </section>

                }
                else
                {
                    <section class="section has-text-centered">
                        <p class="is-size-4 mt-5 has-text-weight-bold">The Kampong is empty..</p>
                        <br />
                        <p>Write a new post to bring the Kampong to life.</p>
                    </section>
                }
            }

        </div>
    </div>
    <div class="column">
        <div class="container m-5">
            @*<div class="has-text-centered mt-6">
            <a href="/">
                <button class="button is-info is-large">
                    <i class="fas fa-map-signs mr-2"></i>Map
                </button>
            </a>
            <p>Explore the rest of KampongTalk</p>
        </div>
        <br />*@

            <p class="has-text-weight-bold mt-5 is-size-6">Popular Communities</p>
            <ul class="minorInfo">
                @if (Model.commsByPopularity != null && Model.commsByPopularity.Count() > 0)
                {

                    @foreach (var comms in Model.commsByPopularity)
                    {
                        <li>
                            <a href="/Community?c=@comms">@CommunityApi.GetCommunityById(comms).Name</a>
                        </li>
                    }

                    <li class="mt-3">
                        <a href="/Community/Explore">View more Communities </a>
                    </li>

                }
                else
                {
                    <li>
                        There are no communities to display.
                    </li>
                }
            </ul>

            <p class="has-text-weight-bold mt-5 is-size-6">Popular Events</p>
            <ul class="minorInfo">
                @if (Model.eventsByPopularity != null && Model.eventsByPopularity.Count() > 0)
                {

                    @foreach (var e in Model.eventsByPopularity)
                    {
                        <li>
                            <a href="/Events/View/@e">@EventApi.GetEventById(Convert.ToInt64(e)).Name</a>
                        </li>
                    }

                    <li class="mt-3">
                        <a href="/Events">View more Events </a>
                    </li>

                }
                else
                {
                    <li>
                        There are no events to display.
                    </li>
                }
            </ul>

            <div class="has-text-centered mt-6">
                <button class="button is-primary is-rounded is-large"
                        onclick="$('#CreatePostModal').fadeIn('fast');">
                    <i class="fas fa-pen mr-2"></i>Write Post
                </button>
            </div>
        </div>
    </div>
</div>

<partial name="_CreatePost" />

<script type="text/javascript" src="~/js/Board.js"></script>

<script type="text/javascript">

    $(document).ready(function () {
        setTimeout(scrollFunc, 1)
        $('#mainBoard').on('scroll', chk_scroll);
    });

    function scrollFunc() {
        var pDivId = @Model.PrevPostDiv
        // Do not remove this console log
        console.log(pDivId)
        if (pDivId) {
            pDivId.parentNode.scrollTop = pDivId.offsetTop;
            removePosition()
        }
    }

    function chk_scroll(e) {

        var elem = $(e.currentTarget);
        if (elem[0].scrollHeight - elem.scrollTop() == elem.outerHeight()) {
            infiniteScroll()
        }
    }

    @*function getPostData() {
        var postType = window.location.pathname.split("/")[1];

            $.ajax({
                type: "POST",
                url: "/Board/fetchposts",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                data: {
                    postType: postType
                },
                success: function (resp) {
                    //$('#mainBoard').append(resp)
                    var pList = resp.items
                    for (var i = 0; i < pList.length; i++) {
                        var post = pList[i]
                        console.log(postObj)

                        var newPost = "<p>"+ post.Content + "</p><br>"
                        $('#mainBoard').append(newPost)
                        //appendPost(post)
                        //$('#mainBoard').append(@Html.PartialAsync("_Post"),post)
                    }

                },
                error: function () {
                    return "error";
                },

            })
    }*@

    function infiniteScroll() {
        var postType = window.location.pathname.split("/")[1];
        $.ajax({
                type: "POST",
                url: "/Board/renderpost",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                data: {
                    postType: postType
                },
                success: function (pv) {
                        $('#mainBoard').append(pv)
                    },
                error: function () {
                    var elementExists = document.getElementById("endOfPosts")

                    if (!elementExists) {
                        var endOfPostsSect = '<section id="endOfPosts" class="section has-text-centered">' +
                            "<p class='is-size-4 mt-5 has-text-weight-bold'>Wow, it looks like you've scrolled to the bottom of the KampongBoard!</p > <br />" +
                            '<button class="button is-medium is-info" onClick="window.location.reload();">Check for new Posts</button>' + "</section>"
                        $('#mainBoard').append(endOfPostsSect)
                    }
                },

            })
    }

    function savePosition(pDivId) {
        $.ajax({
            type: "POST",
            url: "/Board/setpos",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            data: {
                postDivId: pDivId.id.toString()
            }

        })

    }

    function removePosition() {
        $.ajax({
            type: "POST",
            url: "/Board/removepos",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            }

        })
    }

</script>

<script>
        var translateText = (obj) => {
            // var translateString = $(obj).prev().text()
            var translateString = $(obj).parent().parent().parent().parent().prev().children(":first-child").text()
            // Use the TranslateAPIController.cs, and run the Translate() function
            var url = '@Url.Action("Translate", "TranslateAPI")'
            console.log(translateString)
    // Pass in the parameters as {"text": blahblah, "language": blahblah}
    $.get(url, { text: translateString, language: "@UserAttributes.getTranslateLanguage()" })
                .done((data) => {
                    // $(obj).prev().text(data)
                    $(obj).parent().parent().parent().parent().prev().children(":first-child").text(data)
                })
        }

        // Keep a list of all the generated filenames, so we can delete them once the user does not need thems
        var filenames = []

        var deleteFile = (filename) => {
            // "Delete" refers to the function name, not the route name as specified in [Route] within your API controller
            var deleteUrl = '@Url.Action("Delete", "SpeechAPI")'
            console.log(deleteUrl)
            $.get(deleteUrl, { filename: filename })
            .done((data) => {
                console.log(data)
            })
        }

        var synthesizeSpeech = (obj) => {
            // Use the TranslateAPIController.cs, and run the Translate() function
            var url = '@Url.Action("AutoSynthesize", "SpeechAPI")'
            // var ttsText = $(obj).prev().prev().text()
            var ttsText = $(obj).parent().parent().parent().parent().prev().children(":first-child").text()

            // Pass in the parameters as {"text": blahblah, "language": blahblah}
            $.get(url, { text: ttsText, gender: "@UserAttributes.getSpeechGender()" })
                .done((data) => {
                    var filename = `speech/${data}`
                    filenames.push(filename)
                    // $(obj).next().attr("src", filename)
                    // $(obj).next()[0].play()
                    $(obj).parent().parent().next().attr("src", filename)
                    $(obj).parent().parent().next()[0].addEventListener("ended", function () {
                        deleteFile(filename)
                    });
                    $(obj).parent().parent().next()[0].play()
                    // deleteFile(filename)
                })
        }

        // Delete all the synthesized files when the user navigates to another page
        // console.log("This has ran")
        @*$(window).bind('beforeunload', () => {
            filenames.forEach((filename) => {
                deleteFile(filename)
            })
        })*@
    </script>
