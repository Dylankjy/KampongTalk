@page "{handler?}"
@inject Tools.IUserAttributes UserAttributes

@using KampongTalk.Models
@model KampongTalk.Pages.Board.IndexModel
@{
    ViewData["Title"] = "KampongBoard";
    ViewData["currentUid"] = Model.CurrentUser.Uid;
}

<link rel="stylesheet" href="/css/board.css">

<div class="columns is-centered">
    <div class="column pt-5 pl-5">
        <h1 class="title has-text-centered" data-title="@Model.LangData.walkthrough.board.title1" data-intro="@Model.LangData.walkthrough.board.intro1">@Model.LangData.board.kampongBoard</h1>
        <aside class="menu" data-title="@Model.LangData.walkthrough.board.title2" data-intro="@Model.LangData.walkthrough.board.intro2">
            <ul class="menu-list">
                @if (HttpContext.Request.Path == "/Board")
                {
                    <li><a href="/Board" class="is-active">@Model.LangData.board.wholeKampong</a></li>
                }
                else
                {
                    <li><a href="/Board">@Model.LangData.board.wholeKampong</a></li>
}

                @if (HttpContext.Request.Path == "/Board/Friends")
                {
                    <li><a href="/Board/Friends" class="is-active">@Model.LangData.features.friends</a></li>
                }
                else
                {
                    <li><a href="/Board/Friends">@Model.LangData.features.friends</a></li>
}

            </ul>
        </aside>

    </div>
    <div class="column is-three-fifths">
        <div id="mainBoard" class="hero is-fullheight-with-navbar has-background-white-ter" style="overflow-y: auto; height:80vh; padding-left: 1em; padding-right:  1rem; overflow-x:hidden;" 
             data-title="@Model.LangData.walkthrough.board.title3" data-intro="@Model.LangData.walkthrough.board.intro3">

            @if (Model.PostsToDisplay.TotalPages > 0)
            {

                @foreach (var post in Model.PostsToDisplay.Items)
                {
                    <partial name="_Post" model="post" view-data="ViewData" />
                }


            }
            else
            {
                @if (HttpContext.Request.Path == "/Board/Friends")
                {
                    <section class="section has-text-centered">
                        <p class="is-size-4 mt-5 has-text-weight-bold">@Model.LangData.board.empty.noFriends</p>
                        <br />
                        <p>@Model.LangData.board.empty.suggestion</p>
                        <br />
                        <a href="/DigitalVoidDeck/Lobby">
                            <span class="tag is-info is-large">@Model.LangData.board.empty.takeMeToVD</span>
                        </a>
                    </section>

                }
                else
                {
                    <section class="section has-text-centered">
                        <p class="is-size-4 mt-5 has-text-weight-bold">@Model.LangData.board.empty.KtIsEmpty</p>
                        <br />
                        <p>@Model.LangData.board.empty.bringKtToLife</p>
                    </section>
                }
            }

        </div>
    </div>
    <div class="column">
        <div class="container m-5">

            <div data-intro="@Model.LangData.walkthrough.board.intro4">
                <p class="has-text-weight-bold mt-5 is-size-6">@Model.LangData.board.popComms</p>
            <ul class="minorInfo">
                @if (Model.commsByPopularity != null && Model.commsByPopularity.Count() > 0)
                {

                    @foreach (var comms in Model.commsByPopularity)
                    {
                        <li>
                            <a href="/Community?c=@comms">@CommunityApi.GetCommunityById(comms).Name</a>
                        </li>
                    }

                    <li class="mt-3">
                        <a href="/Community/Explore">@Model.LangData.board.viewMoreComms</a>
                    </li>

                }
                else
                {
                    <li>
                        @Model.LangData.board.empty.noComms
                    </li>
                }
            </ul>
            </div>

            <div data-intro="@Model.LangData.walkthrough.board.intro5">
                <p class="has-text-weight-bold mt-5 is-size-6">@Model.LangData.board.popEvents</p>
            <ul class="minorInfo">
                @if (Model.eventsByPopularity != null && Model.eventsByPopularity.Count() > 0)
                {

                    @foreach (var e in Model.eventsByPopularity)
                    {
                        <li>
                            <a href="/Events/View/@e">@EventApi.GetEventById(Convert.ToInt64(e)).Name</a>
                        </li>
                    }

                    <li class="mt-3">
                        <a href="/Events">@Model.LangData.board.viewMoreEvents</a>
                    </li>

                }
                else
                {
                    <li>
                        @Model.LangData.board.empty.noEvents
                    </li>
                }
            </ul>
            </div>

            <div class="has-text-centered mt-6">
                <button class="button is-primary is-rounded is-large"
                        onclick="$('#CreatePostModal').fadeIn('fast');" data-title="@Model.LangData.walkthrough.board.title6" data-intro="@Model.LangData.walkthrough.board.intro6">
                    <i class="fas fa-pen mr-2"></i>@Model.LangData.board.writePost
                </button>
            </div>
        </div>
    </div>
</div>


<!--Image modal-->
<div class="modal is-active" id="ImageModal" style="display: none;">
    <div class="modal-background" onclick="$('#ImageModal').fadeOut('fast');"></div>
    <br />
    <div class="modal-content mt-6">
        <div class="box has-text-centered">
            <img id="imgInModal" />
        </div>
    </div>
    <button class="modal-close is-large" aria-label="close" onclick="$('#ImageModal').fadeOut('fast');"></button>
</div>

<partial name="_CreatePost" />

<script type="text/javascript" src="~/js/Board.js"></script>

<script type="text/javascript">

    $(document).ready(function () {
        setTimeout(scrollFunc, 1)
        $('#mainBoard').on('scroll', chk_scroll);
    });

    function scrollFunc() {
        var pDivId = @Model.PrevPostDiv
        // Do not remove this console log
        console.log(pDivId)
        if (pDivId) {
            pDivId.parentNode.scrollTop = pDivId.offsetTop;
            removePosition()
        }
    }

    function chk_scroll(e) {

        var elem = $(e.currentTarget);
        if ((elem[0].scrollHeight - elem.scrollTop() - 0.4) <= elem.outerHeight()) {
            infiniteScroll()
        }
    }

    function infiniteScroll() {
        var arr = window.location.pathname.split("/")
        var postType = arr[arr.length - 1];
        $.ajax({
                type: "POST",
                url: "/Board/renderpost",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                data: {
                    postType: postType
                },
                success: function (pv) {
                        $('#mainBoard').append(pv)
                    },
                error: function () {
                    var elementExists = document.getElementById("endOfPosts")

                    if (!elementExists) {
                        var endOfPostsSect = '<section id="endOfPosts" class="section has-text-centered">' +
                            "<p class='is-size-4 mt-5 has-text-weight-bold'>@Model.LangData.board.empty.scrollToEnd</p > <br />" +
                            '<button class="button is-medium is-info" onClick="window.location.reload();">@Model.LangData.board.empty.checkNewPosts</button>' + "</section>"
                        $('#mainBoard').append(endOfPostsSect)
                    }
                },

            })
    }

    function savePosition(pDivId) {
        $.ajax({
            type: "POST",
            url: "/Board/setpos",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            data: {
                postDivId: pDivId.id.toString()
            }

        })

    }

    function removePosition() {
        $.ajax({
            type: "POST",
            url: "/Board/removepos",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            }

        })
    }

</script>

<script>
        var translateText = (obj) => {
            // var translateString = $(obj).prev().text()
            var translateString = $(obj).parent().parent().parent().parent().prev().children(":first-child").text()
            // Use the TranslateAPIController.cs, and run the Translate() function
            var url = '@Url.Action("Translate", "TranslateAPI")'
            console.log(translateString)
    // Pass in the parameters as {"text": blahblah, "language": blahblah}
    $.get(url, { text: translateString, language: "@UserAttributes.getTranslateLanguage()" })
                .done((data) => {
                    // $(obj).prev().text(data)
                    $(obj).parent().parent().parent().parent().prev().children(":first-child").text(data)
                })
        }

        // Keep a list of all the generated filenames, so we can delete them once the user does not need thems
        var filenames = []

        var deleteFile = (filename) => {
            // "Delete" refers to the function name, not the route name as specified in [Route] within your API controller
            var deleteUrl = '@Url.Action("Delete", "SpeechAPI")'
            console.log(deleteUrl)
            $.get(deleteUrl, { filename: filename })
            .done((data) => {
                console.log(data)
            })
        }

        var synthesizeSpeech = (obj) => {
            // Use the TranslateAPIController.cs, and run the Translate() function
            var url = '@Url.Action("AutoSynthesize", "SpeechAPI")'
            // var ttsText = $(obj).prev().prev().text()
            var ttsText = $(obj).parent().parent().parent().parent().prev().children(":first-child").text()

            // Pass in the parameters as {"text": blahblah, "language": blahblah}
            $.get(url, { text: ttsText, gender: "@UserAttributes.getSpeechGender()" })
                .done((data) => {
                    var filename = `speech/${data}`
                    filenames.push(filename)
                    // $(obj).next().attr("src", filename)
                    // $(obj).next()[0].play()
                    $(obj).parent().parent().next().attr("src", filename)
                    $(obj).parent().parent().next()[0].addEventListener("ended", function () {
                        deleteFile(filename)
                    });
                    $(obj).parent().parent().next()[0].play()
                    // deleteFile(filename)
                })
        }

        // Delete all the synthesized files when the user navigates to another page
        // console.log("This has ran")
        @*$(window).bind('beforeunload', () => {
            filenames.forEach((filename) => {
                deleteFile(filename)
            })
        })*@
    </script>

<script defer>
    setTimeout(function () {
        if (window.location.hash === '#walkthrough') {
            introJs().start()
        }
    }, 10);
</script>

<script>
    function likePost(postSpan, likeBtn) {
        var Pid = postSpan.innerText
        $.ajax({
            type: "POST",
            url: "/Board/like",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            data: {
                EntityId: Pid
            },
            success: function (likeResp) {
                var likeRespArr = likeResp.toString().split(",")
                if (likeRespArr[0] == '1') {
                    likeBtn.firstElementChild.innerHTML = '<i class="fas fa-thumbs-up"></i>&ensp; @Model.LangData.post.like';
                }
                else {
                    likeBtn.firstElementChild.innerHTML = '<i class="far fa-thumbs-up"></i>&ensp; @Model.LangData.post.like';
                }
                likeBtn.lastElementChild.innerHTML = likeRespArr[1]

            },
            error: function () {
                return "error";
            }

        })
    }
</script>