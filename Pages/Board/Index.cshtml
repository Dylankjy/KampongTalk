@page "{handler?}"
@inject Tools.IUserAttributes UserAttributes

@using KampongTalk.Models
@model KampongTalk.Pages.Board.IndexModel
@{
    ViewData["Title"] = "KampongBoard";
    ViewData["currentUid"] = Model.CurrentUser.Uid;
}

<link rel="stylesheet" href="~/css/board.css">

<div class="columns is-centered">
    <div class="column pt-5 pl-5">
        <h1 class="title has-text-centered">KampongBoard</h1>
        <aside class="menu">
            <ul class="menu-list">
                @if (HttpContext.Request.Path == "/Board")
                {
                    <li><a href="/Board" class="is-active">Whole Kampong</a></li>
}
                else
                {
                    <li><a href="/Board">Whole Kampong</a></li>
}

                @if (HttpContext.Request.Path == "/Board/Friends")
                {
                    <li><a href="/Board/Friends" class="is-active">Friends</a></li>
}
                else
                {
                    <li><a href="/Board/Friends">Friends</a></li>
}

                @if (HttpContext.Request.Path == "/Board/Recommended")
                {
                    <li><a href="/Board/Recommended" class="is-active">Recommended For You</a></li>
}
                else
                {
                    <li><a href="/Board/Recommended">Recommended For You</a></li>
}

            </ul>
        </aside>

    </div>
    <div class="column is-three-fifths">
        <div class="hero is-fullheight-with-navbar has-background-white-ter" style="overflow-y: auto; height:80vh; padding-left: 1em; padding-right:  1rem; overflow-x:hidden;">

            @if (Model.PostsToDisplay.Count() > 0)
            {

                foreach (var post in Model.PostsToDisplay)
                {
                    <partial name="_Post" model="post" view-data="ViewData" />
                }


            }
            else
            {
                @if (HttpContext.Request.Path == "/Board/Friends")
                {
                    <section class="section has-text-centered">
                        <p class="is-size-4 mt-5 has-text-weight-bold">You have no friends :(</p>
                        <br />
                        <p>We suggest finding some friends at the Void Deck</p>
                        <br />
                        <a href="/DigitalVoidDeck/Lobby">
                            <span class="tag is-info is-large">Take me to the Void Deck</span>
                        </a>
                    </section>

                }
                else
                {
                    <section class="section has-text-centered">
                        <p class="is-size-4 mt-5 has-text-weight-bold">The Kampong is empty..</p>
                        <br />
                        <p>Write a new post to bring the Kampong to life.</p>
                    </section>
                }
            }

        </div>
    </div>
    <div class="column">
        <div class="container m-5">
            @*<div class="has-text-centered mt-6">
                    <a href="/">
                        <button class="button is-info is-large">
                            <i class="fas fa-map-signs mr-2"></i>Map
                        </button>
                    </a>
                    <p>Explore the rest of KampongTalk</p>
                </div>
                <br />*@

            <p class="has-text-weight-bold mt-5 is-size-6">Popular Communities</p>
            <ul class="minorInfo">
                <li>
                    <a>Community 1 </a>
                </li>
                <li>
                    <a>Community 2 </a>
                </li>
                <li>
                    <a>Community 3 </a>
                </li>
                <li class="mt-3">
                    <a href="/Community/Explore">View more Communities </a>
                </li>
            </ul>

            <p class="has-text-weight-bold mt-5 is-size-6">Popular Events</p>
            <ul class="minorInfo">
                <li>
                    <a>Event 1 </a>
                </li>
                <li>
                    <a>Event 2 </a>
                </li>
                <li>
                    <a>Event 3 </a>
                </li>
                <li class="mt-3">
                    <a href="/Events">View more Events </a>
                </li>
            </ul>

            <div class="has-text-centered mt-6">
                <button class="button is-primary is-rounded is-large"
                        onclick="$('#CreatePostModal').fadeIn('fast');">
                    <i class="fas fa-pen mr-2"></i>Write Post
                </button>
            </div>
        </div>
    </div>
</div>

<partial name="_CreatePost" />

<script type="text/javascript" src="~/js/Board.js"></script>

<script type="text/javascript">

    $(document).ready(function () {
        setTimeout(scrollFunc, 1)

    });

    function scrollFunc() {
        var pDivId = @Model.PrevPostDiv
        // Do not remove this console log
        console.log(pDivId)
        if (pDivId) {
            //pDivId.scrollIntoView()
            pDivId.parentNode.scrollTop = pDivId.offsetTop;
            removePosition()
        }
    }

    //var dropdownList = document.getElementsByClassName("dropdown");
    //for (const d of dropdownList) {
    //    d.addEventListener('click', function (event) {
    //        event.stopPropagation();
    //        d.classList.toggle('is-active');
    //    });
    //}

    function savePosition(pDivId) {
        $.ajax({
            type: "POST",
            url: "/Board/position",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            data: {
                postDivId: pDivId.id.toString()
            }

        })

    }

    function removePosition() {
        $.ajax({
            type: "POST",
            url: "/Board/removepos",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            }

        })
    }

    //function likePost(postID, likeBtn) {
    //    console.log(postID.toString())
    //    console.log("pid frontend params: ", postID.toString(), " with value : ", (typeof postID))
    //    $.ajax({
    //        type: "POST",
    //        url: "/Board/like",
    //        beforeSend: function (xhr) {
    //            xhr.setRequestHeader("XSRF-TOKEN",
    //                $('input:hidden[name="__RequestVerificationToken"]').val());
    //        },
    //        data: JSON.stringify({
    //            EntityId: postID
    //        }),
    //        contentType: "application/json; charset=utf-8",
    //        dataType: "json",
    //        success: function (likeResp) {
    //            var likeRespArr = likeResp.toString().split(",")
    //            if (likeRespArr[0] == '1') {
    //                // likeBtn.firstElementChild.classList.remove('is-light')
    //                likeBtn.firstElementChild.innerHTML = '<i class="fas fa-thumbs-up"></i>&ensp; Like';
    //            }
    //            else {
    //                //likeBtn.firstElementChild.classList.add('is-light')
    //                likeBtn.firstElementChild.innerHTML = '<i class="far fa-thumbs-up"></i>&ensp; Like';
    //            }
    //            likeBtn.lastElementChild.innerHTML = likeRespArr[1]

    //        },
    //        error: function () {
    //            return "error";
    //        }

    //    })
    //}

    // THIS THE WORKING ONE
    //function likePost(postSpan, likeBtn) {
    //    var Pid = postSpan.innerText
    //    console.log("frontend: " + Pid)
    //    $.ajax({
    //        type: "POST",
    //        url: "/Board/like",
    //        beforeSend: function (xhr) {
    //            xhr.setRequestHeader("XSRF-TOKEN",
    //                $('input:hidden[name="__RequestVerificationToken"]').val());
    //        },
    //        data: {
    //            EntityId: Pid
    //        },
    //        success: function (likeResp) {
    //            var likeRespArr = likeResp.toString().split(",")
    //            if (likeRespArr[0] == '1') {
    //                // likeBtn.firstElementChild.classList.remove('is-light')
    //                likeBtn.firstElementChild.innerHTML = '<i class="fas fa-thumbs-up"></i>&ensp; Like';
    //            }
    //            else {
    //                //likeBtn.firstElementChild.classList.add('is-light')
    //                likeBtn.firstElementChild.innerHTML = '<i class="far fa-thumbs-up"></i>&ensp; Like';
    //            }
    //            likeBtn.lastElementChild.innerHTML = likeRespArr[1]

    //        },
    //        error: function () {
    //            return "error";
    //        }

    //    })
    //}

    //function likesPost(Pid) {
    //    console.log("postid frontend is " + Pid)
    //    console.log(Pid.innerText)
    //    $.ajax({
    //        type: "POST",
    //        url: "/Board/likespost",
    //        beforeSend: function (xhr) {
    //            xhr.setRequestHeader("XSRF-TOKEN",
    //                $('input:hidden[name="__RequestVerificationToken"]').val());
    //        },
    //        data: {
    //            entityID: Pid.innerText
    //        }

    //    })
    //}

    @*function likePost(Pid, likeBtn) {
        $.ajax({
            type: "POST",
            url: "/Board/like",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            data: JSON.stringify({
                EntityId: Pid,
                Uid: @ViewData["currentUid"]
            }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (likeResp) {
                var likeRespArr = likeResp.toString().split(",")
                if (likeRespArr[0] == '1') {
                    likeBtn.classList.remove('is-outlined')
                }
                else {
                    likeBtn.classList.add('is-outlined')
                }
                likeBtn.innerHTML = '<i class="far fa-thumbs-up mr-2"></i>' + likeRespArr[1] + " Likes"

            },
            error: function () {
                return "error";
            }

        })
    }*@

    //function showComments(commentBtn) {
    //    const commentBtnPDiv = commentBtn.parentNode.parentNode
    //    const commentDiv = commentBtnPDiv.nextElementSibling
    //    if (commentDiv.classList.contains('is-hidden')) {
    //        commentBtn.classList.remove('is-outlined')
    //        commentDiv.classList.remove('is-hidden')
    //    } else {
    //        commentBtn.classList.add('is-outlined')
    //        commentDiv.classList.add('is-hidden')
    //    }
    //}

</script>

<script>
        var translateText = (obj) => {
            // var translateString = $(obj).prev().text()
            var translateString = $(obj).parent().parent().parent().parent().prev().children(":first-child").text()
            // Use the TranslateAPIController.cs, and run the Translate() function
            var url = '@Url.Action("Translate", "TranslateAPI")'
            console.log(translateString)
    // Pass in the parameters as {"text": blahblah, "language": blahblah}
    $.get(url, { text: translateString, language: "@UserAttributes.getTranslateLanguage()" })
                .done((data) => {
                    // $(obj).prev().text(data)
                    $(obj).parent().parent().parent().parent().prev().children(":first-child").text(data)
                })
        }

        // Keep a list of all the generated filenames, so we can delete them once the user does not need thems
        var filenames = []

        var deleteFile = (filename) => {
            // "Delete" refers to the function name, not the route name as specified in [Route] within your API controller
            var deleteUrl = '@Url.Action("Delete", "SpeechAPI")'
            console.log(deleteUrl)
            $.get(deleteUrl, { filename: filename })
            .done((data) => {
                console.log(data)
            })
        }

        var synthesizeSpeech = (obj) => {
            // Use the TranslateAPIController.cs, and run the Translate() function
            var url = '@Url.Action("AutoSynthesize", "SpeechAPI")'
            // var ttsText = $(obj).prev().prev().text()
            var ttsText = $(obj).parent().parent().parent().parent().prev().children(":first-child").text()

            // Pass in the parameters as {"text": blahblah, "language": blahblah}
            $.get(url, { text: ttsText, gender: "@UserAttributes.getSpeechGender()" })
                .done((data) => {
                    var filename = `speech/${data}`
                    filenames.push(filename)
                    // $(obj).next().attr("src", filename)
                    // $(obj).next()[0].play()
                    $(obj).parent().parent().next().attr("src", filename)
                    $(obj).parent().parent().next()[0].addEventListener("ended", function () {
                        deleteFile(filename)
                    });
                    $(obj).parent().parent().next()[0].play()
                    // deleteFile(filename)
                })
        }

        // Delete all the synthesized files when the user navigates to another page
        // console.log("This has ran")
        @*$(window).bind('beforeunload', () => {
            filenames.forEach((filename) => {
                deleteFile(filename)
            })
        })*@
    </script>
